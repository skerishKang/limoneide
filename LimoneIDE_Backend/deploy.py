#!/usr/bin/env python3
"""
üçã LimoneIDE Google App Engine Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
ÏûêÎèôÌôîÎêú Î∞∞Ìè¨ Î∞è ÌôòÍ≤Ω ÏÑ§Ï†ï
"""

import os
import sys
import subprocess
import logging
import time
from pathlib import Path
from typing import Dict, Any, List, Optional

# Î∞∞Ìè¨ ÏÑ§Ï†ï ÏûÑÌè¨Ìä∏
from deployment_config import deployment_config, validate_deployment_config, generate_app_yaml

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('deploy')

class AppEngineDeployer:
    """Google App Engine Î∞∞Ìè¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        self.config = deployment_config
        self.project_id = self.config.get("google_cloud.project_id")
        self.service = self.config.get("app_engine.service")
        self.version = self.config.get("app_engine.version")
        
    def check_prerequisites(self) -> bool:
        """Î∞∞Ìè¨ Ï†ÑÏ†ú Ï°∞Í±¥ ÌôïÏù∏"""
        logger.info("Î∞∞Ìè¨ Ï†ÑÏ†ú Ï°∞Í±¥ ÌôïÏù∏ Ï§ë...")
        
        # 1. gcloud CLI ÌôïÏù∏
        try:
            result = subprocess.run(["gcloud", "--version"], capture_output=True, text=True)
            if result.returncode != 0:
                logger.error("gcloud CLIÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
                return False
            logger.info("‚úÖ gcloud CLI ÌôïÏù∏Îê®")
        except FileNotFoundError:
            logger.error("gcloud CLIÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
            return False
        
        # 2. gcloud Ïù∏Ï¶ù ÌôïÏù∏
        try:
            result = subprocess.run(["gcloud", "auth", "list", "--filter=status:ACTIVE"], capture_output=True, text=True)
            if "No credentialed accounts" in result.stdout:
                logger.error("gcloud Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§")
                return False
            logger.info("‚úÖ gcloud Ïù∏Ï¶ù ÌôïÏù∏Îê®")
        except Exception as e:
            logger.error(f"gcloud Ïù∏Ï¶ù ÌôïÏù∏ Ïã§Ìå®: {e}")
            return False
        
        # 3. ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï ÌôïÏù∏
        try:
            result = subprocess.run(["gcloud", "config", "get-value", "project"], capture_output=True, text=True)
            current_project = result.stdout.strip()
            if current_project != self.project_id:
                logger.warning(f"ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ ({current_project})ÏôÄ ÏÑ§Ï†ï ÌîÑÎ°úÏ†ùÌä∏ ({self.project_id})Í∞Ä Îã§Î¶ÖÎãàÎã§")
                # ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
                subprocess.run(["gcloud", "config", "set", "project", self.project_id], check=True)
                logger.info(f"ÌîÑÎ°úÏ†ùÌä∏Î•º {self.project_id}Î°ú ÏÑ§Ï†ïÌñàÏäµÎãàÎã§")
            else:
                logger.info(f"‚úÖ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï ÌôïÏù∏Îê®: {self.project_id}")
        except Exception as e:
            logger.error(f"ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï ÌôïÏù∏ Ïã§Ìå®: {e}")
            return False
        
        # 4. App Engine API ÌôúÏÑ±Ìôî ÌôïÏù∏
        try:
            result = subprocess.run(["gcloud", "services", "list", "--enabled", "--filter=name:appengine.googleapis.com"], capture_output=True, text=True)
            if "appengine.googleapis.com" not in result.stdout:
                logger.info("App Engine API ÌôúÏÑ±Ìôî Ï§ë...")
                subprocess.run(["gcloud", "services", "enable", "appengine.googleapis.com"], check=True)
                logger.info("‚úÖ App Engine API ÌôúÏÑ±ÌôîÎê®")
            else:
                logger.info("‚úÖ App Engine API ÌôïÏù∏Îê®")
        except Exception as e:
            logger.error(f"App Engine API ÌôúÏÑ±Ìôî Ïã§Ìå®: {e}")
            return False
        
        return True
    
    def validate_configuration(self) -> bool:
        """Î∞∞Ìè¨ ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨"""
        logger.info("Î∞∞Ìè¨ ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ï§ë...")
        
        validation = validate_deployment_config()
        
        if validation["errors"]:
            logger.error("Î∞∞Ìè¨ ÏÑ§Ï†ï Ïò§Î•ò:")
            for error in validation["errors"]:
                logger.error(f"  - {error}")
            return False
        
        if validation["warnings"]:
            logger.warning("Î∞∞Ìè¨ ÏÑ§Ï†ï Í≤ΩÍ≥†:")
            for warning in validation["warnings"]:
                logger.warning(f"  - {warning}")
        
        logger.info("‚úÖ Î∞∞Ìè¨ ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÌÜµÍ≥º")
        return True
    
    def prepare_deployment_files(self) -> bool:
        """Î∞∞Ìè¨ ÌååÏùº Ï§ÄÎπÑ"""
        logger.info("Î∞∞Ìè¨ ÌååÏùº Ï§ÄÎπÑ Ï§ë...")
        
        try:
            # 1. app.yaml ÏÉùÏÑ±
            app_yaml_path = generate_app_yaml()
            if not app_yaml_path:
                logger.error("app.yaml ÏÉùÏÑ± Ïã§Ìå®")
                return False
            logger.info(f"‚úÖ app.yaml ÏÉùÏÑ±Îê®: {app_yaml_path}")
            
            # 2. requirements.txt ÌôïÏù∏
            if not os.path.exists("requirements.txt"):
                logger.error("requirements.txt ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§")
                return False
            logger.info("‚úÖ requirements.txt ÌôïÏù∏Îê®")
            
            # 3. Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÌååÏùº ÌôïÏù∏
            if not os.path.exists("main.py"):
                logger.error("main.py ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§")
                return False
            logger.info("‚úÖ main.py ÌôïÏù∏Îê®")
            
            # 4. .gcloudignore ÏÉùÏÑ± (ÌïÑÏöîÌïú Í≤ΩÏö∞)
            gcloudignore_path = ".gcloudignore"
            if not os.path.exists(gcloudignore_path):
                gcloudignore_content = """# .gcloudignore
.git
.gitignore
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.env
*.log
test_*
*_test.py
docs/
*.md
!README.md
"""
                with open(gcloudignore_path, 'w', encoding='utf-8') as f:
                    f.write(gcloudignore_content)
                logger.info("‚úÖ .gcloudignore ÏÉùÏÑ±Îê®")
            
            return True
            
        except Exception as e:
            logger.error(f"Î∞∞Ìè¨ ÌååÏùº Ï§ÄÎπÑ Ïã§Ìå®: {e}")
            return False
    
    def deploy_to_app_engine(self, promote: bool = True) -> bool:
        """App EngineÏóê Î∞∞Ìè¨"""
        logger.info(f"App EngineÏóê Î∞∞Ìè¨ Ï§ë... (ÏÑúÎπÑÏä§: {self.service}, Î≤ÑÏ†Ñ: {self.version})")
        
        try:
            # Î∞∞Ìè¨ Î™ÖÎ†πÏñ¥ Íµ¨ÏÑ±
            deploy_cmd = [
                "gcloud", "app", "deploy",
                "--project", self.project_id,
                "--version", self.version,
                "--quiet"
            ]
            
            if promote:
                deploy_cmd.append("--promote")
            else:
                deploy_cmd.append("--no-promote")
            
            # Î∞∞Ìè¨ Ïã§Ìñâ
            logger.info(f"Î∞∞Ìè¨ Î™ÖÎ†πÏñ¥: {' '.join(deploy_cmd)}")
            result = subprocess.run(deploy_cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error(f"Î∞∞Ìè¨ Ïã§Ìå®: {result.stderr}")
                return False
            
            logger.info("‚úÖ Î∞∞Ìè¨ ÏÑ±Í≥µ!")
            logger.info(f"Î∞∞Ìè¨ Í≤∞Í≥º: {result.stdout}")
            
            # Î∞∞Ìè¨ URL Ï∂úÎ†•
            if promote:
                app_url = f"https://{self.service}-dot-{self.project_id}.appspot.com"
                logger.info(f"Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò URL: {app_url}")
            
            return True
            
        except Exception as e:
            logger.error(f"Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
            return False
    
    def verify_deployment(self) -> bool:
        """Î∞∞Ìè¨ Í≤ÄÏ¶ù"""
        logger.info("Î∞∞Ìè¨ Í≤ÄÏ¶ù Ï§ë...")
        
        try:
            # 1. ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
            result = subprocess.run([
                "gcloud", "app", "services", "list",
                "--project", self.project_id
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error("ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®")
                return False
            
            if self.service not in result.stdout:
                logger.error(f"ÏÑúÎπÑÏä§ {self.service}Í∞Ä Î∞∞Ìè¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
                return False
            
            logger.info("‚úÖ ÏÑúÎπÑÏä§ Î∞∞Ìè¨ ÌôïÏù∏Îê®")
            
            # 2. Î≤ÑÏ†Ñ ÏÉÅÌÉú ÌôïÏù∏
            result = subprocess.run([
                "gcloud", "app", "versions", "list",
                "--service", self.service,
                "--project", self.project_id
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error("Î≤ÑÏ†Ñ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®")
                return False
            
            if self.version not in result.stdout:
                logger.error(f"Î≤ÑÏ†Ñ {self.version}Ïù¥ Î∞∞Ìè¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
                return False
            
            logger.info("‚úÖ Î≤ÑÏ†Ñ Î∞∞Ìè¨ ÌôïÏù∏Îê®")
            
            # 3. Ìó¨Ïä§ Ï≤¥ÌÅ¨ (ÏÑ†ÌÉùÏ†Å)
            app_url = f"https://{self.service}-dot-{self.project_id}.appspot.com/health"
            logger.info(f"Ìó¨Ïä§ Ï≤¥ÌÅ¨ URL: {app_url}")
            
            return True
            
        except Exception as e:
            logger.error(f"Î∞∞Ìè¨ Í≤ÄÏ¶ù Ïã§Ìå®: {e}")
            return False
    
    def rollback_deployment(self, version: str = None) -> bool:
        """Î∞∞Ìè¨ Î°§Î∞±"""
        if version is None:
            version = self.version
        
        logger.info(f"Î∞∞Ìè¨ Î°§Î∞± Ï§ë... (Î≤ÑÏ†Ñ: {version})")
        
        try:
            result = subprocess.run([
                "gcloud", "app", "services", "set-traffic",
                self.service,
                f"--splits={version}=0",
                "--project", self.project_id
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                logger.error(f"Î°§Î∞± Ïã§Ìå®: {result.stderr}")
                return False
            
            logger.info("‚úÖ Î°§Î∞± ÏÑ±Í≥µ!")
            return True
            
        except Exception as e:
            logger.error(f"Î°§Î∞± Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
            return False
    
    def get_deployment_info(self) -> Dict[str, Any]:
        """Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï°∞Ìöå"""
        try:
            result = subprocess.run([
                "gcloud", "app", "describe",
                "--project", self.project_id
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                return {"error": "Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®"}
            
            return {
                "project_id": self.project_id,
                "service": self.service,
                "version": self.version,
                "app_info": result.stdout
            }
            
        except Exception as e:
            return {"error": f"Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë Ïò§Î•ò: {e}"}

def main():
    """Î©îÏù∏ Î∞∞Ìè¨ Ìï®Ïàò"""
    logger.info("üçã LimoneIDE App Engine Î∞∞Ìè¨ ÏãúÏûë")
    
    deployer = AppEngineDeployer()
    
    # 1. Ï†ÑÏ†ú Ï°∞Í±¥ ÌôïÏù∏
    if not deployer.check_prerequisites():
        logger.error("Î∞∞Ìè¨ Ï†ÑÏ†ú Ï°∞Í±¥ ÌôïÏù∏ Ïã§Ìå®")
        sys.exit(1)
    
    # 2. ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if not deployer.validate_configuration():
        logger.error("Î∞∞Ìè¨ ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®")
        sys.exit(1)
    
    # 3. Î∞∞Ìè¨ ÌååÏùº Ï§ÄÎπÑ
    if not deployer.prepare_deployment_files():
        logger.error("Î∞∞Ìè¨ ÌååÏùº Ï§ÄÎπÑ Ïã§Ìå®")
        sys.exit(1)
    
    # 4. App Engine Î∞∞Ìè¨
    if not deployer.deploy_to_app_engine():
        logger.error("App Engine Î∞∞Ìè¨ Ïã§Ìå®")
        sys.exit(1)
    
    # 5. Î∞∞Ìè¨ Í≤ÄÏ¶ù
    if not deployer.verify_deployment():
        logger.error("Î∞∞Ìè¨ Í≤ÄÏ¶ù Ïã§Ìå®")
        sys.exit(1)
    
    logger.info("üéâ LimoneIDE App Engine Î∞∞Ìè¨ ÏôÑÎ£å!")
    
    # Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï∂úÎ†•
    deployment_info = deployer.get_deployment_info()
    logger.info(f"Î∞∞Ìè¨ Ï†ïÎ≥¥: {deployment_info}")

if __name__ == "__main__":
    main() 